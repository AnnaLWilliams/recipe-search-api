// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RecipeApi;

#nullable disable

namespace recipe_search_api.Migrations
{
    [DbContext(typeof(PostgresContext))]
    partial class PostgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KeyWordRecipe", b =>
                {
                    b.Property<int>("KeyWordsID")
                        .HasColumnType("integer");

                    b.Property<int>("RecipesID")
                        .HasColumnType("integer");

                    b.HasKey("KeyWordsID", "RecipesID");

                    b.HasIndex("RecipesID");

                    b.ToTable("KeyWordRecipe");
                });

            modelBuilder.Entity("RecipeApi.Model.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ID"));

                    b.Property<float?>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<string>("Unit")
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("ingredient", (string)null);
                });

            modelBuilder.Entity("RecipeApi.Model.KeyWord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ID"));

                    b.Property<string>("Word")
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("ID");

                    b.ToTable("key_word", (string)null);
                });

            modelBuilder.Entity("RecipeApi.Model.Recipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.ToTable("recipe", (string)null);
                });

            modelBuilder.Entity("RecipeApi.Model.StopWord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ID"));

                    b.Property<string>("Word")
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("ID");

                    b.ToTable("stop_word", (string)null);
                });

            modelBuilder.Entity("RecipeApi.Model.WordToRecipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ID"));

                    b.Property<int?>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("KeyWordID")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<int?>("WordID")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.HasKey("ID");

                    b.HasIndex("KeyWordID");

                    b.HasIndex("RecipeID");

                    b.ToTable("word_to_recipe", (string)null);
                });

            modelBuilder.Entity("KeyWordRecipe", b =>
                {
                    b.HasOne("RecipeApi.Model.KeyWord", null)
                        .WithMany()
                        .HasForeignKey("KeyWordsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeApi.Model.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeApi.Model.Ingredient", b =>
                {
                    b.HasOne("RecipeApi.Model.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeID");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeApi.Model.WordToRecipe", b =>
                {
                    b.HasOne("RecipeApi.Model.KeyWord", "KeyWord")
                        .WithMany()
                        .HasForeignKey("KeyWordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeApi.Model.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeID");

                    b.Navigation("KeyWord");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeApi.Model.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
